package groupproject;

import java.sql.*;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class MainWindow extends javax.swing.JFrame {

    static Connection connection = null;
    boolean name_b = false;
    boolean ssn_b = false;
    boolean street_b = false;
    boolean city_b = false;
    boolean state_b = false;
    boolean phone_b = true;
    boolean phone_filled = false;
    boolean name_in = false;
    boolean id_in = false;
    boolean isbn_in = false;
    boolean title_out = false;
    boolean isbn_out = false;
    boolean id_out = false;
    boolean filter = false;
    LocalDate TODAY = java.time.LocalDate.now();
    LocalDate TODAY2 = java.time.LocalDate.now();

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        FormatTables();
        PopulateBorrowerTable(connection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuItem3 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        isbn13Label_search = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        SearchButton_Search = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchArea_search = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();
        CheckOutSwitchButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        title1_CO = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        isbn1_CO = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        CheckOut_CO = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        title2_CO = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        isbn2_CO = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        dateOut_CO = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        dueDate_CO = new javax.swing.JTextField();
        cardID_Spinner_CO = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        name_CI = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cardID_Spinner_CI = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        getResultsButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane5 = new javax.swing.JScrollPane();
        CheckInTable = new javax.swing.JTable();
        CheckInButton = new javax.swing.JButton();
        isbn_CI = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        jScrollPane6 = new javax.swing.JScrollPane();
        finestable = new javax.swing.JTable();
        PayFinesButton = new javax.swing.JButton();
        filterResultsCheck = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SSN_Borrower = new javax.swing.JFormattedTextField();
        Street_Borrower = new javax.swing.JTextField();
        Name_Borrower = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        City_Borrower = new javax.swing.JTextField();
        State_Borrower = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        Phone_Borrower = new javax.swing.JFormattedTextField();
        AddBorrowerButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BorrowerTable = new javax.swing.JTable();
        jSeparator7 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        ExitButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        changeDateButton = new javax.swing.JMenuItem();
        RefreshItem = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Search For Books");

        isbn13Label_search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        isbn13Label_search.setText("Search");

        SearchButton_Search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SearchButton_Search.setText("Search Books");
        SearchButton_Search.setEnabled(false);
        SearchButton_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchButton_SearchMouseClicked(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setText("Results");

        searchArea_search.setColumns(20);
        searchArea_search.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchArea_search.setRows(5);
        searchArea_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchArea_searchKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(searchArea_search);

        SearchTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Book Title", "Book Author(s)", "Available?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchTable.setShowGrid(false);
        SearchTable.getTableHeader().setReorderingAllowed(false);
        SearchTable.setUpdateSelectionOnSort(false);
        SearchTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SearchTableMouseDragged(evt);
            }
        });
        SearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(SearchTable);

        CheckOutSwitchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CheckOutSwitchButton.setText("Check Out");
        CheckOutSwitchButton.setEnabled(false);
        CheckOutSwitchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckOutSwitchButtonMouseClicked(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 0, 0));

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CheckOutSwitchButton)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel28)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jLabel15)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(isbn13Label_search)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SearchButton_Search)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 194, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(isbn13Label_search)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SearchButton_Search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckOutSwitchButton)
                    .addComponent(jLabel16)
                    .addComponent(jLabel28))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Search Books", jPanel1);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel21.setText("Check Out Book");

        jSeparator11.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator11.setToolTipText("");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel22.setText("Results");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("Book Title");

        title1_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        title1_CO.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("ISBN 13");

        isbn1_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        isbn1_CO.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Card ID");

        CheckOut_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CheckOut_CO.setText("Check Out Book");
        CheckOut_CO.setEnabled(false);
        CheckOut_CO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckOut_COMouseClicked(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Book Title");

        title2_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        title2_CO.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("ISBN 13");

        isbn2_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        isbn2_CO.setEnabled(false);

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setText("Date Out");

        dateOut_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateOut_CO.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Due Date");

        dueDate_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dueDate_CO.setEnabled(false);

        cardID_Spinner_CO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cardID_Spinner_CO.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999999, 1));
        cardID_Spinner_CO.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cardID_Spinner_COStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(isbn1_CO, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(title1_CO, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cardID_Spinner_CO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 390, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(CheckOut_CO)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSeparator10)
                        .addGap(14, 14, 14)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel25)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateOut_CO, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(dueDate_CO))
                        .addGap(321, 321, 321))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel13))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(title2_CO, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(isbn2_CO, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(539, 539, 539)
                    .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(573, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(title1_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(isbn1_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(title2_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(isbn2_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(cardID_Spinner_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(CheckOut_CO))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(dateOut_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(dueDate_CO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(395, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(247, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Check Out", jPanel2);

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel26.setText("Check In Book");

        name_CI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        name_CI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                name_CIKeyReleased(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setText("Borrower Name");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("ISBN 13");

        cardID_Spinner_CI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cardID_Spinner_CI.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999999, 1));
        cardID_Spinner_CI.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cardID_Spinner_CIStateChanged(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Card ID");

        getResultsButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getResultsButton.setText("Get Results");
        getResultsButton.setEnabled(false);
        getResultsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getResultsButtonMouseClicked(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel19.setText("Results");

        CheckInTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CheckInTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card ID", "ISBN", "Book Title", "Date OUT", "Due Date", "Date IN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CheckInTable.setToolTipText("");
        CheckInTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        CheckInTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                CheckInTableMouseDragged(evt);
            }
        });
        CheckInTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckInTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(CheckInTable);

        CheckInButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CheckInButton.setText("Check In");
        CheckInButton.setEnabled(false);
        CheckInButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckInButtonMouseClicked(evt);
            }
        });

        try {
            isbn_CI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#############")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        isbn_CI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        isbn_CI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                isbn_CIKeyReleased(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator13)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel26)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(CheckInButton)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel20))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(getResultsButton)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel27)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel18))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cardID_Spinner_CI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(name_CI, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(isbn_CI, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 625, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(name_CI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(isbn_CI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18)
                    .addComponent(cardID_Spinner_CI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(getResultsButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckInButton)
                    .addComponent(jLabel20))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Check In", jPanel3);

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel29.setText("View/Pay For Fines");

        finestable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finestable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card ID", "Fine Amount", "Paid?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        finestable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                finestableMouseDragged(evt);
            }
        });
        finestable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finestableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(finestable);

        PayFinesButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PayFinesButton.setText("Pay Fines");
        PayFinesButton.setEnabled(false);
        PayFinesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PayFinesButtonMouseClicked(evt);
            }
        });

        filterResultsCheck.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        filterResultsCheck.setText("Show Paid Fines?");
        filterResultsCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterResultsCheckMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1094, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(PayFinesButton)
                                .addGap(18, 18, 18)
                                .addComponent(filterResultsCheck)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PayFinesButton)
                    .addComponent(filterResultsCheck))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Fines", jPanel5);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Add New Borrower");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Name");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("SSN");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Street");

        try {
            SSN_Borrower.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        SSN_Borrower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SSN_Borrower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SSN_BorrowerKeyReleased(evt);
            }
        });

        Street_Borrower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Street_Borrower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Street_BorrowerKeyReleased(evt);
            }
        });

        Name_Borrower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Name_Borrower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Name_BorrowerKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("City");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("State");
        jLabel8.setToolTipText("");

        City_Borrower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        City_Borrower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                City_BorrowerKeyReleased(evt);
            }
        });

        State_Borrower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        State_Borrower.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALABAMA\t(AL)", "ALASKA\t(AK)", "AMERICAN SAMOA\t(AS)", "ARIZONA\t(AZ)", "ARKANSAS\t(AR)", "CALIFORNIA\t(CA)", "COLORADO\t(CO)", "CONNECTICUT\t(CT)", "DELAWARE\t(DE)", "DISTRICT OF COLUMBIA\t(DC)", "FLORIDA\t(FL)", "GEORGIA\t(GA)", "GUAM\t(GU)", "HAWAII\t(HI)", "IDAHO\t(ID)", "ILLINOIS\t(IL)", "INDIANA\t(IN)", "IOWA\t(IA)", "KANSAS\t(KS)", "KENTUCKY\t(KY)", "LOUISIANA\t(LA)", "MAINE\t(ME)", "MARYLAND (MD)", "MASSACHUSETTS\t(MA)", "MICHIGAN\t(MI)", "MINNESOTA\t(MN)", "MISSISSIPPI (MS)", "MISSOURI\t(MO)", "MONTANA\t(MT)", "NEBRASKA\t(NE)", "NEVADA\t(NV)", "NEW HAMPSHIRE\t(NH)", "NEW JERSEY\t(NJ)", "NEW MEXICO\t(NM)", "NEW YORK\t(NY)", "NORTH CAROLINA\t(NC)", "NORTH DAKOTA\t(ND)", "NORTHERN MARIANA IS\t(MP)", "OHIO\t(OH)", "OKLAHOMA\t(OK)", "OREGON\t(OR)", "PENNSYLVANIA\t(PA)", "PUERTO RICO\t(PR)", "RHODE ISLAND\t(RI)", "SOUTH CAROLINA\t(SC)", "SOUTH DAKOTA\t(SD)", "TENNESSEE\t(TN)", "TEXAS\t(TX)", "UTAH\t(UT)", "VERMONT\t(VT)", "VIRGINIA\t(VA)", "VIRGIN ISLANDS\t(VI)", "WASHINGTON\t(WA)", "WEST VIRGINIA\t(WV)", "WISCONSIN\t(WI)", "WYOMING\t(WY)" }));
        State_Borrower.setSelectedIndex(-1);
        State_Borrower.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                State_BorrowerItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Phone");

        try {
            Phone_Borrower.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###) ###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        Phone_Borrower.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Phone_Borrower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Phone_BorrowerKeyReleased(evt);
            }
        });

        AddBorrowerButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddBorrowerButton.setText("Add Borrower");
        AddBorrowerButton.setEnabled(false);
        AddBorrowerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBorrowerButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("OPTIONAL");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("List Of Borrowers");

        BorrowerTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BorrowerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card ID", "SSN", "Full Name", "Address", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        BorrowerTable.setColumnSelectionAllowed(true);
        BorrowerTable.setShowGrid(false);
        BorrowerTable.setShowHorizontalLines(true);
        BorrowerTable.setShowVerticalLines(true);
        jScrollPane1.setViewportView(BorrowerTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jSeparator7)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(30, 30, 30)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(SSN_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Name_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(28, 28, 28)
                                        .addComponent(Street_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(8, 8, 8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(City_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(Phone_Borrower)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel10))
                                .addComponent(State_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(471, 471, 471))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(AddBorrowerButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Name_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(SSN_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Street_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(City_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(State_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Phone_Borrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))))
                .addGap(18, 18, 18)
                .addComponent(AddBorrowerButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Borrower", jPanel4);

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem2.setText("About");
        jMenu1.add(jMenuItem2);

        ExitButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jMenu1.add(ExitButton);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Admin");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        changeDateButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        changeDateButton.setText("Change Date");
        changeDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDateButtonActionPerformed(evt);
            }
        });
        jMenu2.add(changeDateButton);

        RefreshItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RefreshItem.setText("Refresh Entries");
        RefreshItem.setToolTipText("");
        RefreshItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshItemActionPerformed(evt);
            }
        });
        jMenu2.add(RefreshItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //exactly what the function is called
    private ArrayList<String> SearchHelper(String s, int choice) {
        //this should be pretty easy to understand. not going to bother commenting. lmk if you don't get it.
        String lines[] = s.split("\n");
        ArrayList<String> retList = new ArrayList<>();
        if (choice == 1) {
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].startsWith("9780") || lines[i].startsWith("9781")) {
                    retList.add(lines[i]);
                }
            }
            return retList;
        } else if (choice == 2) {
            for (int i = 0; i < lines.length; i++) {
                if (!lines[i].startsWith("9780") || !lines[i].startsWith("9781") && !lines[i].isBlank()) {
                    retList.add(lines[i]);
                }
            }
            return retList;
        }
        return retList;
    }

    //exactly what the function is called
    private void PopulateTable(Object res[], JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(res);
    }

    //when the user enters info in the search area
    private void searchArea_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchArea_searchKeyReleased
        String search = searchArea_search.getText();
        if (!search.isBlank()) {
            SearchButton_Search.setEnabled(true);
        } else {
            SearchButton_Search.setEnabled(false);
        }
    }//GEN-LAST:event_searchArea_searchKeyReleased

    //clicking exit option
    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    //Add borrower
    private void AddBorrowerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBorrowerButtonActionPerformed
        String state = State_Borrower.getItemAt(State_Borrower.getSelectedIndex());
        state = state.substring(state.length() - 4);
        state = state.substring(1, 3);
        String sqlQuery = "";
        int res = -1;
        if (phone_filled) {
            sqlQuery = "insert ignore into library.borrower "
                    + "(Ssn,Bname,Street,City,State,Phone) "
                    + "values "
                    + "('" + SSN_Borrower.getText() + "','" + Name_Borrower.getText() + "','" + Street_Borrower.getText() + "','" + City_Borrower.getText() + "','" + state + "','" + Phone_Borrower.getText() + "');";
        } else {
            sqlQuery = "insert ignore into library.borrower "
                    + "(Ssn,Bname,Street,City,State) "
                    + "values "
                    + "('" + SSN_Borrower.getText() + "','" + Name_Borrower.getText() + "','" + Street_Borrower.getText() + "','" + City_Borrower.getText() + "','" + state + "');";
        }
        try (Statement s = connection.createStatement()) {
            res = s.executeUpdate(sqlQuery);
            if (res == 0) {
                JOptionPane.showConfirmDialog(null,
                        "That SSN is already being used. New Borrower NOT added to database", "Failure!", JOptionPane.DEFAULT_OPTION);
            } else if (res == 1) {
                JOptionPane.showConfirmDialog(null,
                        "New Borrower added to database!", "Success!", JOptionPane.DEFAULT_OPTION);
            }
            PopulateBorrowerTable(connection);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_AddBorrowerButtonActionPerformed

    //Make sure they put in a valid format for a phone number
    private void Phone_BorrowerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Phone_BorrowerKeyReleased
        String phone = Phone_Borrower.getText();
        String regex = "\\(\\d{3}\\)[\\s]\\d{3}[-]\\d{4}";
        if (!phone.isBlank() && phone.matches(regex)) {
            phone_b = true;
            phone_filled = true;
        } else if (phone.charAt(1) == ' ' && !phone.matches(regex)) {
            phone_b = true;
            phone_filled = false;
        } else {
            phone_b = false;
            AddBorrowerButton.setEnabled(false);
        }
        if (name_b && ssn_b && street_b && city_b && state_b && phone_b) {
            AddBorrowerButton.setEnabled(true);
        }
    }//GEN-LAST:event_Phone_BorrowerKeyReleased

    //when the user changes the state
    private void State_BorrowerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_State_BorrowerItemStateChanged
        String state = State_Borrower.getItemAt(State_Borrower.getSelectedIndex());
        if (!state.isBlank()) {
            state_b = true;
        }
        if (name_b && ssn_b && street_b && city_b && state_b && phone_b) {
            AddBorrowerButton.setEnabled(true);
        }
    }//GEN-LAST:event_State_BorrowerItemStateChanged

    //when the user enters a city
    private void City_BorrowerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_City_BorrowerKeyReleased
        String city = City_Borrower.getText();
        if (!city.isBlank()) {
            city_b = true;
        } else {
            city_b = false;
            AddBorrowerButton.setEnabled(false);
        }
        if (name_b && ssn_b && street_b && city_b && state_b && phone_b) {
            AddBorrowerButton.setEnabled(true);
        }
    }//GEN-LAST:event_City_BorrowerKeyReleased

    //when the user enters a name
    private void Name_BorrowerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Name_BorrowerKeyReleased
        String name = Name_Borrower.getText();
        if (!name.isBlank()) {
            name_b = true;
        } else {
            name_b = false;
            AddBorrowerButton.setEnabled(false);
        }
        if (name_b && ssn_b && street_b && city_b && state_b && phone_b) {
            AddBorrowerButton.setEnabled(true);
        }
    }//GEN-LAST:event_Name_BorrowerKeyReleased

    //when the user enters a street
    private void Street_BorrowerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Street_BorrowerKeyReleased
        String street = Street_Borrower.getText();
        if (!street.isBlank()) {
            street_b = true;
        } else {
            street_b = false;
            AddBorrowerButton.setEnabled(false);
        }
        if (name_b && ssn_b && street_b && city_b && state_b && phone_b) {
            AddBorrowerButton.setEnabled(true);
        }
    }//GEN-LAST:event_Street_BorrowerKeyReleased

    //make sure the user enters a valid format for SSN
    private void SSN_BorrowerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SSN_BorrowerKeyReleased
        String ssn = SSN_Borrower.getText();
        if (!ssn.isBlank() && ssn.matches("\\d{3}[-]\\d{2}[-]\\d{4}")) {
            ssn_b = true;
        } else {
            ssn_b = false;
            AddBorrowerButton.setEnabled(false);
        }
        if (name_b && ssn_b && street_b && city_b && state_b && phone_b) {
            AddBorrowerButton.setEnabled(true);
        }
    }//GEN-LAST:event_SSN_BorrowerKeyReleased

    //clicking a row in the search table
    private void SearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchTableMouseClicked
        int row[] = SearchTable.getSelectedRows();
        if (row.length == 1) {
            if ((boolean) SearchTable.getValueAt(row[0], 3) == true) {
                CheckOutSwitchButton.setEnabled(true);
                jLabel16.setText("");
            } else {
                CheckOutSwitchButton.setEnabled(false);
                jLabel16.setText("One or more books from your selection are not available.");
            }
        } else {
            CheckOutSwitchButton.setEnabled(false);
            jLabel16.setText("You can only select one book at a time to check out.");
        }
    }//GEN-LAST:event_SearchTableMouseClicked

    //clicking and dragging on a row(s) in the search table
    private void SearchTableMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchTableMouseDragged
        int row[] = SearchTable.getSelectedRows();
        if (row.length == 1) {
            if ((boolean) SearchTable.getValueAt(row[0], 3) == true) {
                CheckOutSwitchButton.setEnabled(true);
                jLabel16.setText("");
            } else {
                jLabel16.setText("One or more books from your selection are not available.");
            }
        } else {
            CheckOutSwitchButton.setEnabled(false);
            jLabel16.setText("You can only select one book at a time to check out.");
        }
    }//GEN-LAST:event_SearchTableMouseDragged

    //clicking check out on the search tab to switch to the check out tab
    private void CheckOutSwitchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckOutSwitchButtonMouseClicked
        if (CheckOutSwitchButton.isEnabled()) {
            title1_CO.setText((String) SearchTable.getValueAt(SearchTable.getSelectedRow(), 1));
            isbn1_CO.setText((String) SearchTable.getValueAt(SearchTable.getSelectedRow(), 0));
            jTabbedPane1.setSelectedIndex(1);
            title_out = true;
            isbn_out = true;
            CheckOut_CO.setEnabled(title_out && isbn_out && id_out);
        }
    }//GEN-LAST:event_CheckOutSwitchButtonMouseClicked

    //clicking check out
    private void CheckOut_COMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckOut_COMouseClicked
        String isbn = isbn1_CO.getText();
        String sqlQuery, sqlQuery2 = "";
        boolean validID = false;
        boolean available = false;
        int cardID = -1;
        try {
            cardID = Integer.parseInt(cardID_Spinner_CO.getValue().toString());
        } catch (NumberFormatException e) {
            JOptionPane.showConfirmDialog(null,
                    "Illegal characters were input in the Card ID field! Remove them and try again.", "Failure!", JOptionPane.DEFAULT_OPTION);
            return;
        }
        int loans = 0;
        int result = -1;
        sqlQuery = "select Date_in from book_loans where Isbn13=" + isbn + " order by Loan_id desc";
        try (Statement s0 = connection.createStatement()) {
            ResultSet rs0 = s0.executeQuery(sqlQuery);
            if (rs0.next()) {
                available = rs0.getDate("Date_in") != null;
            } else {
                available = true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (available) {
            if (!isbn.isBlank() && cardID > 0 && CheckOut_CO.isEnabled()) {
                sqlQuery = "select * from borrower where Card_id=" + cardID;
                try (Statement s1 = connection.createStatement()) {
                    ResultSet rs1 = s1.executeQuery(sqlQuery);
                    if (rs1.next()) {
                        validID = true;
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                if (validID) {
                    sqlQuery = "select count(*) from book_loans where Card_id=" + cardID + " and Date_in is null";
                    try (Statement s2 = connection.createStatement()) {
                        ResultSet rs2 = s2.executeQuery(sqlQuery);
                        if (rs2.next()) {
                            loans = rs2.getInt(1);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (validID) {
                    if (loans < 3) {
                        int temp = Math.abs(Period.between(TODAY, LocalDate.now()).getDays());
                        var t_date = LocalDate.now(ZoneId.of("America/Chicago")).plusDays(temp);
                        sqlQuery2 = "insert into book_loans (Isbn13,Card_id,Date_out,Due_date) values (" + isbn + "," + cardID + ",'" + t_date + "','" + t_date.plusDays(14) + "')";
                        try (Statement s3 = connection.createStatement()) {
                            result = s3.executeUpdate(sqlQuery2);
                            if (result == 0) {
                                JOptionPane.showConfirmDialog(null,
                                        "The attempt to check out the book failed because of a database error!", "Failure!", JOptionPane.DEFAULT_OPTION);
                            } else if (result == 1) {
                                JOptionPane.showConfirmDialog(null,
                                        "Book was successfully checked out!", "Success!", JOptionPane.DEFAULT_OPTION);
                                title2_CO.setText(title1_CO.getText());
                                title1_CO.setText("");
                                isbn2_CO.setText(isbn);
                                isbn1_CO.setText("");
                                dateOut_CO.setText(java.time.LocalDate.now().toString());
                                dueDate_CO.setText(java.time.LocalDate.now().plusDays(14).toString());
                                cardID_Spinner_CO.setValue(0);
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        sqlQuery = "insert into fines (fine_amt,paid) values (0.00,false)";
                        try (Statement s4 = connection.createStatement()) {
                            result = s4.executeUpdate(sqlQuery);
                            if (result == 0) {
                                JOptionPane.showConfirmDialog(null,
                                        "The attempt to check out the book failed because of a database error!", "Failure!", JOptionPane.DEFAULT_OPTION);
                            } else if (result == 1) {
                                JOptionPane.showConfirmDialog(null,
                                        "A record for the fines was successfully added also!", "Success!", JOptionPane.DEFAULT_OPTION);
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    } else {
                        JOptionPane.showConfirmDialog(null,
                                "The attempt to check out the book failed because the borrower already has 3 books out!", "Failure!", JOptionPane.DEFAULT_OPTION);
                    }
                }
            }
        } else {
            JOptionPane.showConfirmDialog(null,
                    "This book is not available!", "Failure!", JOptionPane.DEFAULT_OPTION);
        }
    }//GEN-LAST:event_CheckOut_COMouseClicked

    //changing the value of the Card ID spinner in check out
    private void cardID_Spinner_COStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cardID_Spinner_COStateChanged
        if (Integer.valueOf(cardID_Spinner_CO.getValue().toString()) > 0) {
            id_out = true;
            CheckOut_CO.setEnabled(title_out && isbn_out);
        } else {
            CheckOut_CO.setEnabled(false);
        }
    }//GEN-LAST:event_cardID_Spinner_COStateChanged

    //changing the value of the Card ID spinner in check in
    private void cardID_Spinner_CIStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cardID_Spinner_CIStateChanged
        if (Integer.valueOf(cardID_Spinner_CI.getValue().toString()) > 0) {
            id_in = true;
        } else {
            id_in = false;
        }
        getResultsButton.setEnabled(id_in || name_in || isbn_in);
    }//GEN-LAST:event_cardID_Spinner_CIStateChanged

    //getting the results of searching for a record in the check in table
    private void getResultsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getResultsButtonMouseClicked
        DefaultTableModel model = (DefaultTableModel) CheckInTable.getModel(); //get the tablemodel of the table we're filling.
        model.setRowCount(0); //empty it. each time the user presses search, it will clear the table.
        String name = name_CI.getText();
        String isbn = isbn_CI.getText();
        int id = (int) cardID_Spinner_CI.getValue();
        ArrayList<Integer> idList = new ArrayList<>();
        String sqlQuery = ""; //sql query 1
        String sqlQuery2 = ""; //sql query 2
        String sqlQuery3 = ""; //sql query 3
        int t_id = -1;
        String t_date = "";
        Object res[] = new Object[6]; //needed to set the fields in the table

        //searching by name
        if (!name.isBlank()) {
            sqlQuery = "select Card_id from borrower where bName like '%" + name + "%'";
            try (Statement s1 = connection.createStatement()) {
                ResultSet rs1 = s1.executeQuery(sqlQuery);
                while (rs1.next()) {
                    t_id = rs1.getInt(1);
                    sqlQuery2 = "select * from book_loans where Card_id=" + t_id;
                    try (Statement s2 = connection.createStatement()) {
                        ResultSet rs2 = s2.executeQuery(sqlQuery2);
                        while (rs2.next()) {
                            if (!idList.contains(rs2.getInt("Loan_id"))) {
                                idList.add(rs2.getInt("Loan_id"));
                                sqlQuery3 = "select Title from book where Isbn13=" + rs2.getString("Isbn13");
                                try (Statement s3 = connection.createStatement()) {
                                    ResultSet rs3 = s3.executeQuery(sqlQuery3);
                                    while (rs3.next()) {
                                        res[2] = rs3.getString(1);
                                    }
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                res[1] = rs2.getString("Isbn13");
                                res[0] = rs2.getInt("Card_id");
                                res[3] = rs2.getDate("Date_out").toString();
                                res[4] = rs2.getDate("Due_date").toString();
                                try {
                                    t_date = rs2.getDate("Date_in").toString();
                                } catch (Exception e) {
                                    t_date = "NA";
                                }
                                res[5] = t_date;
                                PopulateTable(res, CheckInTable);
                                name_CI.setText("");
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        //searching by isbn
        if (isbn_in) {
            sqlQuery = "select book_loans.Loan_id,book_loans.Isbn13,book_loans.Card_id,book_loans.Date_out,book_loans.Date_in,book_loans.Due_date,book.Title from book_loans inner join book on book_loans.Isbn13=book.Isbn13 and book_loans.Isbn13=" + isbn;
            try (Statement s4 = connection.createStatement()) {
                ResultSet rs4 = s4.executeQuery(sqlQuery);
                while (rs4.next()) {
                    if (!idList.contains(rs4.getInt("Loan_id"))) {
                        idList.add(rs4.getInt("Loan_id"));
                        res[0] = rs4.getInt("Card_id");
                        res[1] = isbn;
                        res[2] = rs4.getString("Title");
                        res[3] = rs4.getDate("Date_out").toString();
                        res[4] = rs4.getDate("Due_date").toString();
                        try {
                            t_date = rs4.getDate("Date_in").toString();
                        } catch (Exception e) {
                            t_date = "NA";
                        }
                        res[5] = t_date;
                        PopulateTable(res, CheckInTable);
                        isbn_CI.setText("");
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        //searching by id
        if (id_in) {
            sqlQuery = "select book_loans.Loan_id,book_loans.Isbn13,book_loans.Card_id,book_loans.Date_out,book_loans.Date_in,book_loans.Due_date,book.Title from book_loans inner join book on book_loans.Isbn13=book.Isbn13 and book_loans.Card_id=" + id;
            try (Statement s6 = connection.createStatement()) {
                ResultSet rs6 = s6.executeQuery(sqlQuery);
                while (rs6.next()) {
                    if (!idList.contains(rs6.getInt("Loan_id"))) {
                        idList.add(rs6.getInt("Loan_id"));
                        res[0] = id;
                        res[1] = rs6.getString("Isbn13");
                        res[2] = rs6.getString("Title");
                        res[3] = rs6.getDate("Date_out").toString();
                        res[4] = rs6.getDate("Due_date").toString();
                        try {
                            t_date = rs6.getDate("Date_in").toString();
                        } catch (Exception e) {
                            t_date = "NA";
                        }
                        res[5] = t_date;
                        PopulateTable(res, CheckInTable);
                        cardID_Spinner_CI.setValue(0);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_getResultsButtonMouseClicked

    //clicking a row in the check in table
    private void CheckInTableMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckInTableMouseDragged
        int row[] = CheckInTable.getSelectedRows();
        if (row.length == 1) {
            CheckInButton.setEnabled(true);
            jLabel20.setText("");
        } else {
            CheckInButton.setEnabled(false);
            jLabel20.setText("You can only select one book at a time to check in.");
        }
    }//GEN-LAST:event_CheckInTableMouseDragged

    //clicking and dragging on a row(s) in the check in table
    private void CheckInTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckInTableMouseClicked
        int row[] = CheckInTable.getSelectedRows();
        if (row.length == 1) {
            CheckInButton.setEnabled(true);
            jLabel20.setText("");
        } else {
            CheckInButton.setEnabled(false);
            jLabel20.setText("You can only select one book at a time to check in.");
        }
    }//GEN-LAST:event_CheckInTableMouseClicked

    //clicking the check in button to return the book
    private void CheckInButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckInButtonMouseClicked
        String isbn = (String) CheckInTable.getValueAt(CheckInTable.getSelectedRow(), 1);
        int id = (int) CheckInTable.getValueAt(CheckInTable.getSelectedRow(), 0);
        String sqlQuery = "";
        String sqlQuery2 = "";
        String sqlQuery3 = "";
        int temp = Math.abs(Period.between(TODAY, LocalDate.now()).getDays());
        var t_date = LocalDate.now(ZoneId.of("America/Chicago")).plusDays(temp);
        if (CheckInButton.isEnabled()) {
            sqlQuery = "update book_loans set Date_in = '" + t_date + "' where Isbn13=" + isbn + " and Card_id=" + id + " and Date_in is NULL";
            try (Statement s1 = connection.createStatement()) {
                int result = s1.executeUpdate(sqlQuery);
                if (result == 0) {
                    JOptionPane.showConfirmDialog(null,
                            "The attempt to check in the book failed!", "Failure!", JOptionPane.DEFAULT_OPTION);
                } else {
                    if (result != 1) {
                        System.out.println(result);
                    }
                    sqlQuery2 = "select * from book_loans where Isbn13=" + isbn + " and Card_id=" + id;
                    try (Statement s2 = connection.createStatement()) {
                        ResultSet rs2 = s2.executeQuery(sqlQuery2);
                        while (rs2.next()) {
                            boolean late = Period.between(TODAY, rs2.getDate("Due_date").toLocalDate()).isNegative();
                            int days = late ? Math.abs(Period.between(TODAY, rs2.getDate("Due_date").toLocalDate()).getDays()) : 0;
                            if (days != 0) {
                                sqlQuery3 = "update fines set Fine_amt=" + days * .25 + " where Loan_id=" + rs2.getInt("Loan_id");
                                try (Statement s3 = connection.createStatement()) {
                                    int rs3 = s3.executeUpdate(sqlQuery3);
                                    if (rs3 == 0) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in, but the fines were NOT assessed!", "Failure!", JOptionPane.DEFAULT_OPTION);
                                    } else if (rs3 == 1) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in!", "Success!", JOptionPane.DEFAULT_OPTION);
                                        //switch to fines tab
                                    }
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            } else {
                                sqlQuery3 = "update fines set Fine_amt=0, Paid = true where Loan_id=" + rs2.getInt("Loan_id");
                                try (Statement s3 = connection.createStatement()) {
                                    int rs3 = s3.executeUpdate(sqlQuery3);
                                    if (rs3 == 0) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in, but the fines were NOT assessed!", "Failure!", JOptionPane.DEFAULT_OPTION);
                                    } else if (rs3 == 1) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in, but there were no fines to assess!", "Success!", JOptionPane.DEFAULT_OPTION);
                                    }
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_CheckInButtonMouseClicked

    private void addMeBackToCheckInButtonMouseClicked_MAYBE() {
        String isbn = (String) CheckInTable.getValueAt(CheckInTable.getSelectedRow(), 1);
        int id = (int) CheckInTable.getValueAt(CheckInTable.getSelectedRow(), 0);
        String sqlQuery = "";
        String sqlQuery2 = "";
        String sqlQuery3 = "";
        if (CheckInButton.isEnabled()) {
            sqlQuery = "update book_loans set Date_in = curdate() where Isbn13=" + isbn + " and Card_id=" + id;
            try (Statement s1 = connection.createStatement()) {
                int result = s1.executeUpdate(sqlQuery);
                if (result == 0) {
                    JOptionPane.showConfirmDialog(null,
                            "The attempt to check in the book failed!", "Failure!", JOptionPane.DEFAULT_OPTION);
                } else if (result == 1) {
                    sqlQuery2 = "select * from book_loans where Isbn13=" + isbn + " and Card_id=" + id;
                    try (Statement s2 = connection.createStatement()) {
                        ResultSet rs2 = s2.executeQuery(sqlQuery2);
                        while (rs2.next()) {
                            boolean late = Period.between(java.time.LocalDate.now(), rs2.getDate("Due_date").toLocalDate()).isNegative();
                            int days = late ? Math.abs(Period.between(java.time.LocalDate.now(), rs2.getDate("Due_date").toLocalDate()).getDays()) : 0;
                            if (days != 0) {
                                sqlQuery3 = "update fines set Fine_amt=" + days * .25 + " where Loan_id=" + rs2.getInt("Loan_id");
                                try (Statement s3 = connection.createStatement()) {
                                    int rs3 = s3.executeUpdate(sqlQuery3);
                                    if (rs3 == 0) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in, but the fines were NOT assessed!", "Failure!", JOptionPane.DEFAULT_OPTION);
                                    } else if (rs3 == 1) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in and fines were assessed!", "Success!", JOptionPane.DEFAULT_OPTION);
                                        //switch to fines tab
                                    }
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            } else {
                                sqlQuery3 = "update fines set Fine_amt=0, Paid = true where Loan_id=" + rs2.getInt("Loan_id");
                                try (Statement s3 = connection.createStatement()) {
                                    int rs3 = s3.executeUpdate(sqlQuery3);
                                    if (rs3 == 0) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in, but the fines were NOT assessed!", "Failure!", JOptionPane.DEFAULT_OPTION);
                                    } else if (rs3 == 1) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Book was successfully checked in and fines were assessed!", "Success!", JOptionPane.DEFAULT_OPTION);
                                    }
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.out.println("didn't work for some reason");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    //entering a name to search for in check in
    private void name_CIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_name_CIKeyReleased
        String name = name_CI.getText();
        if (!name.isBlank()) {
            name_in = true;
        } else {
            name_in = false;
        }
        getResultsButton.setEnabled(id_in || name_in || isbn_in);
    }//GEN-LAST:event_name_CIKeyReleased

    //entering an isbn to search for in check in
    private void isbn_CIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_isbn_CIKeyReleased
        String isbn = isbn_CI.getText();
        if (!isbn.isBlank() && isbn.matches("\\d{13}")) {
            isbn_in = true;
        } else {
            isbn_in = false;
        }
        getResultsButton.setEnabled(id_in || name_in || isbn_in);
    }//GEN-LAST:event_isbn_CIKeyReleased

    //clicking the button to search for a book/author/isbn
    private void SearchButton_SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchButton_SearchMouseClicked
        DefaultTableModel model = (DefaultTableModel) SearchTable.getModel(); //get the tablemodel of the table we're filling.
        model.setRowCount(0); //empty it. each time the user presses search, it will clear the table.
        String entry = searchArea_search.getText(); //get the entered text, going to assume that the user enters info line by line
        ArrayList<String> isbn = new ArrayList<>(); //list to hold ISBNs (potentially many)
        ArrayList<String> words = new ArrayList<>(); //list to hold titles and names (no way to differentiate b/w them)
        ArrayList<String> ret_isbn = new ArrayList<>(); //list to hold the ISBNs that have already been added to the table
        String sqlQuery = ""; //sql query 1
        String sqlQuery2 = ""; //sql query 2
        String sqlQuery3 = ""; //sql query 3
        String sqlQuery4 = ""; //sql query 4
        String temp = ""; //if there is more than one author for a book, concat it in this
        String t_isbn = ""; //temp isbn to be used if it's not accessible
        Object res[] = new Object[4]; //needed to set the fields in the table

        if (!entry.isBlank()) { //as long as the user entered something
            isbn = SearchHelper(entry, 1); //set isbn to the result of calling SearchHelper
            words = SearchHelper(entry, 2); //set words to the result of calling SearchHelper

            //begin looping through isbn list, idk if this is legal btw (if user can do this)
            if (!isbn.isEmpty()) { //if there is at least one isbn entry
                for (String s : isbn) {
                    temp = "";
                    if (!ret_isbn.contains(s)) { //if it doesn't have the current isbn, then do the rest. Otherwise, don't so there isn't dups in the table.
                        ret_isbn.add(s); //add it
                        sqlQuery = "select * from book where Isbn13=" + s; //get record from book where isbn13 = current isbn in list
                        try (Statement s1 = connection.createStatement()) { //create a statement
                            ResultSet rs1 = s1.executeQuery(sqlQuery); //get the results of the query
                            while (rs1.next()) { //while there is a record to retrieve
                                res[0] = rs1.getString("Isbn13"); //get the ISBN13 of the book and set it to the first entry in res
                                res[1] = rs1.getString("Title"); //get the title of the book and set it to the second entry in res
                            }
                        } catch (SQLException e) { //catch any sql exception thrown
                            e.printStackTrace(); //just print the usually cryptic shit that it says happened
                        }
                        sqlQuery = "select Author_id from book_authors where Isbn13 =" + s; //get record from book_authors where isbn13 = current isbn in list
                        try (Statement s2 = connection.createStatement()) { //create a statement (not sure exactly what this is)
                            ResultSet rs2 = s2.executeQuery(sqlQuery); //get the results of the query
                            while (rs2.next()) { //while there is a record to retrieve
                                int id = rs2.getInt("Author_id"); //save the author_id in this temp variable ************ not necessary
                                sqlQuery2 = "select Name from authors where Author_id =" + id; //get record from authors where Author_id = id (from above)
                                try (Statement s3 = connection.createStatement()) { //create a statment (still not sure what this is)
                                    ResultSet rs3 = s3.executeQuery(sqlQuery2); //get thre results of the query
                                    while (rs3.next()) { //while there is a record to retrieve
                                        temp = temp.concat(", " + rs3.getString("Name")); //concat the name to temp for use in the table
                                    }
                                } catch (SQLException e) { //catch any sql exception thrown
                                    e.printStackTrace(); //just print the usually cryptic shit that it says happened
                                }
                            }
                        } catch (SQLException e) { //catch any sql exception thrown
                            e.printStackTrace(); //just print the usually cryptic shit that it says happened
                        }
                        sqlQuery = "select Loan_id, Date_in from book_loans where Isbn13=" + s + " order by Loan_id desc";
                        try (Statement s4 = connection.createStatement()) { //create statement
                            ResultSet rs4 = s4.executeQuery(sqlQuery); //get results of the query
                            if (rs4.next()) {
                                res[3] = rs4.getDate("Date_in") != null;
                            } else { //if there is NOT a record to retrieve, or in other words, if it's NOT checked out
                                res[3] = true; //set the last value for the table to true
                            }
                        } catch (SQLException e) { //catch any sql exception thrown
                            e.printStackTrace(); //just print the usually cryptic shit that it says happened
                        }
                        if (temp.length() > 2) {
                            temp = temp.substring(2); //remove the first two characters from temp (comma and space)
                        }
                        res[2] = temp; //set the third entry in res to the author(s) name(s)
                        PopulateTable(res, SearchTable); //add the record to the table
                    }
                }
            }
            //end looping through isbn list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //begin looping through the words list
            if (!words.isEmpty()) {
                for (String s : words) {

                    //searching through the names
                    sqlQuery = "select * from authors where Name like '%" + s + "%'";
                    try (Statement s5 = connection.createStatement()) { //create a statement
                        ResultSet rs5 = s5.executeQuery(sqlQuery); //get the results of the query
                        while (rs5.next()) { //while there is a record to retrieve
                            temp = ""; //reset temp, otherwise it ouputs bs
                            int id = rs5.getInt("Author_id"); //store the first id
                            sqlQuery2 = "select * from book_authors where Author_id=" + id; //select * from book where author_id = id (from above)
                            try (Statement s6 = connection.createStatement()) { //create statement (I should really look this up)
                                ResultSet rs6 = s6.executeQuery(sqlQuery2); //get the results of the query
                                while (rs6.next()) { //while there is a record to retrieve
                                    t_isbn = rs6.getString("Isbn13"); //save the isbn in t_isbn
                                    sqlQuery3 = "select Author_id from book_authors where Isbn13=" + t_isbn; //get the corresponding author_id.
                                    //I'm not commenting anymore of this function. If you can't tell what it does by now from reading it and my comments, just skip it.
                                    //what is commented is just copy/paste stuff from above
                                    try (Statement s7 = connection.createStatement()) {
                                        ResultSet rs7 = s7.executeQuery(sqlQuery3);
                                        while (rs7.next()) {
                                            int t_id = rs7.getInt("Author_id");
                                            sqlQuery4 = "select Name from authors where Author_id=" + t_id;
                                            try (Statement s8 = connection.createStatement()) {
                                                ResultSet rs8 = s8.executeQuery(sqlQuery4);
                                                while (rs8.next()) {
                                                    temp = temp.concat(", " + rs8.getString("Name"));
                                                }
                                            } catch (SQLException e) { //catch any sql exception thrown
                                                e.printStackTrace(); //just print the usually cryptic shit that it says happened
                                            }
                                            res[0] = t_isbn;
                                        }
                                    } catch (SQLException e) { //catch any sql exception thrown
                                        e.printStackTrace(); //just print the usually cryptic shit that it says happened
                                    }
                                }
                            } catch (SQLException e) { //catch any sql exception thrown
                                e.printStackTrace(); //just print the usually cryptic shit that it says happened
                            }
                            sqlQuery = "select Title from book where Isbn13 =" + t_isbn;
                            try (Statement s9 = connection.createStatement()) { //create a statement
                                ResultSet rs9 = s9.executeQuery(sqlQuery); //get the results of the query
                                if (rs9.next()) { //while there is a record to retrieve
                                    res[1] = rs9.getString("Title"); //get the title of the book and set it to the second entry in res
                                }
                            } catch (SQLException e) { //catch any sql exception thrown
                                e.printStackTrace(); //just print the usually cryptic shit that it says happened
                            }
                            sqlQuery = "select Loan_id, Date_in from book_loans where Isbn13=" + t_isbn + " order by Loan_id desc";
                            try (Statement s10 = connection.createStatement()) { //create statement
                                ResultSet rs10 = s10.executeQuery(sqlQuery); //get results of the query
                                if (rs10.next()) {
                                    res[3] = rs10.getDate("Date_in") != null;
                                } else { //if there is NOT a record to retrieve, or in other words, if it's NOT checked out
                                    res[3] = true; //set the last value for the table to true
                                }
                            } catch (SQLException e) { //catch any sql exception thrown
                                e.printStackTrace(); //just print the usually cryptic shit that it says happened
                            }
                            if (temp.length() > 2) {
                                temp = temp.substring(2); //remove the first two characters from temp (comma and space)
                            }
                            res[2] = temp; //set the third entry in res to the author(s) name(s)
                            if (!ret_isbn.contains(t_isbn)) {
                                ret_isbn.add(t_isbn);
                                PopulateTable(res, SearchTable); //add the record to the table
                            }
                        }
                    } catch (SQLException e) { //catch any sql exception thrown
                        e.printStackTrace(); //just print the usually cryptic shit that it says happened
                    }

                    //searching through the books
                    sqlQuery = "select * from book where Title like '%" + s + "%'";
                    try (Statement s11 = connection.createStatement()) { //create statement
                        ResultSet rs11 = s11.executeQuery(sqlQuery); //get results of the query
                        while (rs11.next()) { //if there is a record to retrieve, or in other words, if it's checked out
                            temp = "";
                            t_isbn = rs11.getString("Isbn13");
                            res[0] = t_isbn;
                            res[1] = rs11.getString("Title");
                            sqlQuery = "select Author_id from book_authors where Isbn13 =" + t_isbn; //get record from book_authors where isbn13 = current isbn in list
                            try (Statement s12 = connection.createStatement()) { //create a statement (not sure exactly what this is)
                                ResultSet rs12 = s12.executeQuery(sqlQuery); //get the results of the query
                                while (rs12.next()) { //while there is a record to retrieve
                                    int id = rs12.getInt("Author_id"); //save the author_id in this temp variable ************ not necessary
                                    sqlQuery2 = "select Name from authors where Author_id =" + id; //get record from authors where Author_id = id (from above)
                                    try (Statement s13 = connection.createStatement()) { //create a statment (still not sure what this is)
                                        ResultSet rs13 = s13.executeQuery(sqlQuery2); //get thre results of the query
                                        while (rs13.next()) { //while there is a record to retrieve
                                            temp = temp.concat(", " + rs13.getString("Name")); //concat the name to temp for use in the table
                                        }
                                    } catch (SQLException e) { //catch any sql exception thrown
                                        e.printStackTrace(); //just print the usually cryptic shit that it says happened
                                    }
                                }
                            } catch (SQLException e) { //catch any sql exception thrown
                                e.printStackTrace(); //just print the usually cryptic shit that it says happened
                            }
                            sqlQuery = "select Loan_id, Date_in from book_loans where Isbn13=" + t_isbn + " order by Loan_id desc";
                            try (Statement s14 = connection.createStatement()) { //create statement
                                ResultSet rs14 = s14.executeQuery(sqlQuery); //get results of the query
                                if (rs14.next()) {
                                    res[3] = rs14.getDate("Date_in") != null;
                                } else { //if there is NOT a record to retrieve, or in other words, if it's NOT checked out
                                    res[3] = true; //set the last value for the table to true
                                }
                            } catch (SQLException e) { //catch any sql exception thrown
                                e.printStackTrace(); //just print the usually cryptic shit that it says happened
                            }
                            if (temp.length() > 2) {
                                temp = temp.substring(2); //remove the first two characters from temp (comma and space)
                            }
                            res[2] = temp; //set the third entry in res to the author(s) name(s)
                            if (!ret_isbn.contains(t_isbn)) {
                                ret_isbn.add(t_isbn);
                                PopulateTable(res, SearchTable); //add the record to the table
                            }
                        }
                    } catch (SQLException e) { //catch any sql exception thrown
                        e.printStackTrace(); //just print the usually cryptic shit that it says happened
                    }
                }
            }
            //end looping through the words list
        }
    }//GEN-LAST:event_SearchButton_SearchMouseClicked

    //refreshing the fines entries
    private void RefreshItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshItemActionPerformed
        TODAY = TODAY.plusDays(1);
        JOptionPane.showConfirmDialog(null,
                "Now TODAY is set to " + TODAY.toString(), "Alert", JOptionPane.DEFAULT_OPTION);
        String sqlQuery = "";
        String sqlQuery2 = "";
        String sqlQuery3 = "";
        int days = 0;
        int loan_id = -1;
        boolean late = false;

        sqlQuery = "select * from book_loans";
        try (Statement s1 = connection.createStatement()) {
            ResultSet rs1 = s1.executeQuery(sqlQuery);
            while (rs1.next()) {
                late = Period.between(TODAY, rs1.getDate("Due_date").toLocalDate()).isNegative();
                loan_id = rs1.getInt("Loan_id");
                days = rs1.getDate("Date_in") == null ? Period.between(TODAY, rs1.getDate("Due_Date").toLocalDate()).getDays() : Period.between(rs1.getDate("Due_date").toLocalDate(), rs1.getDate("Date_in").toLocalDate()).getDays();
                if (late) {
                    if (rs1.getDate(5) == null) {
                        sqlQuery2 = "select * from fines where Loan_id=" + loan_id;
                        try (Statement s2 = connection.createStatement()) {
                            ResultSet rs2 = s2.executeQuery(sqlQuery2);
                            if (rs2.next()) {
                                if (rs2.getBoolean("Paid") == false) {
                                    sqlQuery3 = "update fines set Fine_amt = " + Math.abs(days * .25) + "where Loan_id=" + loan_id;
                                    try (Statement s3 = connection.createStatement()) {
                                        int res1 = s3.executeUpdate(sqlQuery3);
                                        if (res1 == 0) {
                                            JOptionPane.showConfirmDialog(null,
                                                    "Failed to update fines records!", "Failure!", JOptionPane.DEFAULT_OPTION);
                                        } else if (res1 == 1) {
                                            JOptionPane.showConfirmDialog(null,
                                                    "Successfully updated fines records!", "Success!", JOptionPane.DEFAULT_OPTION);
                                        }
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        RefreshFinesTable();
    }//GEN-LAST:event_RefreshItemActionPerformed

    private void PayFinesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PayFinesButtonMouseClicked
        int card_id = (int) finestable.getValueAt(finestable.getSelectedRow(), 0);
        String sqlQuery, sqlQuery2, sqlQuery3 = "";
        sqlQuery = "select * from book_loans where Card_id=" + card_id;
        try (Statement s1 = connection.createStatement()) {
            ResultSet rs1 = s1.executeQuery(sqlQuery);
            while (rs1.next()) {
                if (rs1.getDate("Date_in") != null) {
                    sqlQuery2 = "select * from fines where Loan_id=" + rs1.getInt("Loan_id");
                    try (Statement s2 = connection.createStatement()) {
                        ResultSet rs2 = s2.executeQuery(sqlQuery2);
                        while (rs2.next()) {
                            if (!rs2.getBoolean("Paid")) {
                                sqlQuery3 = "update fines set Paid = true where Loan_id=" + rs2.getInt("Loan_id");
                                try (Statement s3 = connection.createStatement()) {
                                    int res1 = s3.executeUpdate(sqlQuery3);
                                    if (res1 == 0) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Failed to update fines records!", "Failure!", JOptionPane.DEFAULT_OPTION);
                                    } else if (res1 == 1) {
                                        JOptionPane.showConfirmDialog(null,
                                                "Successfully updated fines records!", "Success!", JOptionPane.DEFAULT_OPTION);
                                        PayFinesButton.setEnabled(false);
                                    }
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else {
                    JOptionPane.showConfirmDialog(null,
                            "Can't pay fines on a book that isn't turned in!", "Failure!", JOptionPane.DEFAULT_OPTION);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_PayFinesButtonMouseClicked

    private void filterResultsCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterResultsCheckMouseClicked
        filter = filterResultsCheck.isSelected();
    }//GEN-LAST:event_filterResultsCheckMouseClicked

    private void changeDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDateButtonActionPerformed
        TODAY = TODAY.plusDays(1);
        JOptionPane.showConfirmDialog(null,
                "Now TODAY is set to " + TODAY.toString(), "Alert", JOptionPane.DEFAULT_OPTION);
    }//GEN-LAST:event_changeDateButtonActionPerformed

    private void finestableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finestableMouseClicked
        int row[] = finestable.getSelectedRows();
        if (row.length == 1) {
            if ((boolean) finestable.getValueAt(row[0], 2) == false) {
                PayFinesButton.setEnabled(true);
                jLabel28.setText("");
            } else {
                PayFinesButton.setEnabled(false);
                jLabel28.setText("The fines have already been paid for this selection.");
            }
        } else {
            PayFinesButton.setEnabled(false);
            jLabel28.setText("You can only pay one borrower's fines at a time.");
        }
    }//GEN-LAST:event_finestableMouseClicked

    private void finestableMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finestableMouseDragged
        int row[] = finestable.getSelectedRows();
        if (row.length == 1) {
            if ((boolean) finestable.getValueAt(row[0], 2) == false) {
                PayFinesButton.setEnabled(true);
                jLabel28.setText("");
            } else {
                PayFinesButton.setEnabled(false);
                jLabel28.setText("The fines have already been paid for this selection.");
            }
        } else {
            PayFinesButton.setEnabled(false);
            jLabel28.setText("You can only pay one borrower's fines at a time.");
        }
    }//GEN-LAST:event_finestableMouseDragged

    private void RefreshFinesTable() {
        DefaultTableModel model = (DefaultTableModel) finestable.getModel();
        model.setRowCount(0);
        Object res[] = new Object[3];
        int card_id = -1;
        double fines = 0.0;
        boolean paid = true;
        boolean firstIteration = true;
        int loan_id = -1;
        String sqlQuery = "";
        String sqlQuery2 = "";
        String sqlQuery3 = "";
        sqlQuery = "select * from book_loans order by Card_id asc";
        try (Statement s1 = connection.createStatement()) {
            ResultSet rs1 = s1.executeQuery(sqlQuery);
            while (rs1.next()) {
                if (firstIteration) {
                    firstIteration = false;
                    card_id = rs1.getInt("Card_id");
                    loan_id = rs1.getInt("Loan_id");
                    sqlQuery2 = "select * from fines where loan_id=" + loan_id;
                    try (Statement s2 = connection.createStatement()) {
                        ResultSet rs2 = s2.executeQuery(sqlQuery2);
                        if (rs2.next()) {
                            if (!rs2.getBoolean("Paid")) {
                                fines += rs2.getDouble("Fine_amt");
                            }
                            paid = rs2.getBoolean("Paid") && paid;
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else {
                    if (card_id != rs1.getInt("Card_id")) {
                        res[0] = card_id;
                        res[1] = fines;
                        res[2] = paid;
                        if (!filter) {
                            if (!paid) {
                                PopulateTable(res, finestable);
                            }
                        } else {
                            PopulateTable(res, finestable);
                        }
                        fines = 0.0;
                        card_id = rs1.getInt("Card_id");
                        loan_id = rs1.getInt("Loan_id");
                        sqlQuery2 = "select * from fines where loan_id=" + loan_id;
                        try (Statement s3 = connection.createStatement()) {
                            ResultSet rs3 = s3.executeQuery(sqlQuery2);
                            if (rs3.next()) {
                                if (!rs3.getBoolean("Paid")) {
                                    fines += rs3.getDouble("Fine_amt");
                                }
                                paid = rs3.getBoolean("Paid") && paid;
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    } else {
                        card_id = rs1.getInt("Card_id");
                        loan_id = rs1.getInt("Loan_id");
                        sqlQuery2 = "select * from fines where loan_id=" + loan_id;
                        try (Statement s4 = connection.createStatement()) {
                            ResultSet rs4 = s4.executeQuery(sqlQuery2);
                            if (rs4.next()) {
                                if (!rs4.getBoolean("Paid")) {
                                    fines += rs4.getDouble("Fine_amt");
                                }
                                paid = rs4.getBoolean("Paid") && paid;
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            res[0] = card_id;
            res[1] = fines;
            res[2] = paid;
            if (!filter) {
                if (!paid) {
                    PopulateTable(res, finestable);
                }
            } else {
                PopulateTable(res, finestable);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //set windows look and feel. Nimbus is trash.
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "root");
            if (connection != null) {
                System.out.println("Connected to database!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    private void FormatTables() {
        DefaultTableCellRenderer columnRenderer = new DefaultTableCellRenderer();
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        columnRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        headerRenderer = (DefaultTableCellRenderer) SearchTable.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        SearchTable.getColumnModel().getColumn(0).setCellRenderer(columnRenderer);
        SearchTable.getColumnModel().getColumn(1).setCellRenderer(columnRenderer);
        SearchTable.getColumnModel().getColumn(2).setCellRenderer(columnRenderer);
        SearchTable.getColumnModel().getColumn(3).setCellRenderer(columnRenderer);
        headerRenderer = (DefaultTableCellRenderer) BorrowerTable.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        BorrowerTable.getColumnModel().getColumn(0).setCellRenderer(columnRenderer);
        BorrowerTable.getColumnModel().getColumn(1).setCellRenderer(columnRenderer);
        BorrowerTable.getColumnModel().getColumn(2).setCellRenderer(columnRenderer);
        BorrowerTable.getColumnModel().getColumn(3).setCellRenderer(columnRenderer);
        BorrowerTable.getColumnModel().getColumn(4).setCellRenderer(columnRenderer);
        headerRenderer = (DefaultTableCellRenderer) CheckInTable.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        CheckInTable.getColumnModel().getColumn(0).setCellRenderer(columnRenderer);
        CheckInTable.getColumnModel().getColumn(1).setCellRenderer(columnRenderer);
        CheckInTable.getColumnModel().getColumn(2).setCellRenderer(columnRenderer);
        CheckInTable.getColumnModel().getColumn(3).setCellRenderer(columnRenderer);
        CheckInTable.getColumnModel().getColumn(4).setCellRenderer(columnRenderer);
        CheckInTable.getColumnModel().getColumn(5).setCellRenderer(columnRenderer);
    }

    private void PopulateBorrowerTable(Connection c) {
        DefaultTableModel model = (DefaultTableModel) BorrowerTable.getModel();
        model.setRowCount(0);
        String sqlQuery = "select * from library.borrower;";
        Object rowData[] = new Object[5];
        try (Statement stmt = c.createStatement()) {
            ResultSet rs = stmt.executeQuery(sqlQuery);
            while (rs.next()) {
                rowData[0] = rs.getString("Card_id");
                rowData[1] = rs.getString("Ssn");
                rowData[2] = rs.getString("Bname");
                rowData[3] = rs.getString("Street") + ", " + rs.getString("City") + ", " + rs.getString("State");
                rowData[4] = rs.getString("Phone");
                model.addRow(rowData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBorrowerButton;
    private javax.swing.JTable BorrowerTable;
    private javax.swing.JButton CheckInButton;
    private javax.swing.JTable CheckInTable;
    private javax.swing.JButton CheckOutSwitchButton;
    private javax.swing.JButton CheckOut_CO;
    private javax.swing.JTextField City_Borrower;
    private javax.swing.JMenuItem ExitButton;
    private javax.swing.JTextField Name_Borrower;
    private javax.swing.JButton PayFinesButton;
    private javax.swing.JFormattedTextField Phone_Borrower;
    private javax.swing.JMenuItem RefreshItem;
    private javax.swing.JFormattedTextField SSN_Borrower;
    private javax.swing.JButton SearchButton_Search;
    private javax.swing.JTable SearchTable;
    private javax.swing.JComboBox<String> State_Borrower;
    private javax.swing.JTextField Street_Borrower;
    private javax.swing.JSpinner cardID_Spinner_CI;
    private javax.swing.JSpinner cardID_Spinner_CO;
    private javax.swing.JMenuItem changeDateButton;
    private javax.swing.JTextField dateOut_CO;
    private javax.swing.JTextField dueDate_CO;
    private javax.swing.JCheckBox filterResultsCheck;
    private javax.swing.JTable finestable;
    private javax.swing.JButton getResultsButton;
    private javax.swing.JLabel isbn13Label_search;
    private javax.swing.JTextField isbn1_CO;
    private javax.swing.JTextField isbn2_CO;
    private javax.swing.JFormattedTextField isbn_CI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField name_CI;
    private javax.swing.JTextArea searchArea_search;
    private javax.swing.JTextField title1_CO;
    private javax.swing.JTextField title2_CO;
    // End of variables declaration//GEN-END:variables
}
